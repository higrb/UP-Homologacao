# Databricks notebook source
from pyspark.sql.functions import expr, current_timestamp, regexp_replace, col, udf, trim ,upper,max,count,desc
from pyspark.sql.types import IntegerType, StringType, StructType, StructField, LongType
from delta.tables import DeltaTable
import re

# COMMAND ----------

# MAGIC %sql
# MAGIC
# MAGIC --  -- ************** SCRIPT CRICAO DE TABELA 
# MAGIC -- create table silverdev.default.dm_cli (
# MAGIC --   SRK_CLI bigint generated by default as identity not null,
# MAGIC --   COD_ENT bigint not null,
# MAGIC --   COD_TIP_ENT bigint not null,
# MAGIC --   NME_ENT string not null,
# MAGIC --   NME_RAZ_SOC string not null,
# MAGIC --   COD_STA_TRN string not null,
# MAGIC --   NUM_CNPJ string not null,
# MAGIC -- 	FLG_CNPJ_VAL int not null,
# MAGIC -- 	DSC_TIPO_DOC string not null,
# MAGIC --   NME_CID string not null,
# MAGIC --   DSC_UF string not null,
# MAGIC --  -- DSC_END string not null,
# MAGIC --   NME_BRRO string not null,
# MAGIC --   NUM_CEP string not null,
# MAGIC --   NUM_TEL string not null,
# MAGIC --   NME_CONT string not null,
# MAGIC --   DSC_EMAIL string not null,
# MAGIC --   DAT_INS timestamp not null,
# MAGIC --   DAT_ATU timestamp not null
# MAGIC   
# MAGIC -- )

# COMMAND ----------

# FUNCOES
def limpaNUM(vlr):
    vlr = re.sub('[^0-9]', '', vlr)
    return vlr
limpaNUM_udf= udf(limpaNUM,StringType())

# COMMAND ----------

# Foi adicionado uma etapa de transformação para selecionar um subconjunto de colunas na tabela landingzonedadosdev.default.ContasUsuarios e renomeá-las para nomes mais legíveis e intuitivos, respeitando os mnemonicos conforme documentação.
df_Entidades = spark.table(' bronzedev.default.entidades')\
    .select(
        'COD_ENT',
        'COD_TIP_ENT',
        'NME_ENT',
        'NME_RAZ_SOC',
        'COD_STA_TRN',
        'NUM_CNPJ',
        'FLG_CNPJ_VAL',
        'DSC_TIPO_DOC',
        'NME_CID_VAL',
        'DSC_UF_VAL',
        'NME_BRROI_VAL',
        'NUM_CEP',
        'NUM_TEL',
        'NME_CONT',
        'DSC_EMAIL',
        'DAT_INS',
        'DAT_ATU' 
        )\
    .withColumn("NME_ENT", upper(trim(col("NME_ENT"))))\
    .withColumn("NME_RAZ_SOC", upper(trim(col("NME_ENT"))))\
    .withColumn("NUM_CNPJ",limpaNUM_udf("NUM_CNPJ"))\
    .withColumn("DSC_EMAIL", upper(trim(col("DSC_EMAIL"))))\
    .withColumn("COD_ENT", col("COD_ENT").cast("Integer"))\
    .withColumnRenamed("NME_CID_VAL", "NME_CID")\
    .withColumnRenamed("DSC_UF_VAL", "DSC_UF")\
    .withColumnRenamed("NME_BRROI_VAL", "NME_BRRO")

# COMMAND ----------

df_Entidades=df_Entidades.na.fill("N/I")
df_Entidades=df_Entidades.na.replace("", "N/I")

# COMMAND ----------

df_Entidades_Ult = df_Entidades \
    .groupBy( 
            # 'COD_TIP_ENT',
            # 'NME_ENT',
            # 'NME_RAZ_SOC',
            # 'COD_STA_TRN',
            'NUM_CNPJ',
            # 'FLG_CNPJ_VAL',
            # 'DSC_TIPO_DOC',
            # 'NME_CID_VAL',
            # 'DSC_UF_VAL',
            # 'NME_BRROI_VAL',
            # 'NUM_CEP',
            # 'NUM_TEL',
            # 'NME_CONT',
            # 'DSC_EMAIL',
            # 'DAT_INS',
            # 'DAT_ATU'
    ) \
    .agg(max("COD_ENT").alias("COD_ENT"))


# COMMAND ----------

df_Entidades_final = df_Entidades.join(df_Entidades_Ult, ["NUM_CNPJ", "COD_ENT"], "inner")

# COMMAND ----------

df_Entidades_final = df_Entidades_final.withColumn("COD_ENT", df_Entidades_final["COD_ENT"].cast(LongType()))
df_Entidades_final = df_Entidades_final.withColumn("COD_TIP_ENT", df_Entidades_final["COD_TIP_ENT"].cast(LongType()))

# COMMAND ----------

schema = StructType([
  StructField('NUM_CNPJ', StringType()),
  StructField('COD_ENT', StringType()),
  StructField('COD_TIP_ENT', StringType()),
  StructField('NME_ENT', StringType()),
  StructField('NME_RAZ_SOC', StringType()),
  StructField('COD_STA_TRN', StringType()),
  StructField('FLG_CNPJ_VAL', StringType()),
  StructField('DSC_TIPO_DOC', StringType()),
  StructField('NME_CID', StringType()),
  StructField('DSC_UF', StringType()),
  StructField('NME_BRRO', StringType()),
  StructField('NUM_CEP', StringType()),
  StructField('NUM_TEL', StringType()),
  StructField('NME_CONT', StringType()),
  StructField('DSC_EMAIL', StringType()),  
  StructField('DAT_INS', StringType()),
  StructField('DAT_ATU', StringType())
])

novolinha = {
    'NUM_CNPJ': '-1',
    'COD_ENT': '-1',
    'COD_TIP_ENT': '-1',
    'NME_ENT': '-1',
    'NME_RAZ_SOC': '-1',
    'COD_STA_TRN': '-1',
    'FLG_CNPJ_VAL': '-1',
    'DSC_TIPO_DOC': '-1',
    'NME_CID': '-1',
    'DSC_UF': '-1',
    'NME_BRRO': '-1',
    'NUM_CEP': '-1',
    'NUM_TEL': '-1',
    'NME_CONT': '-1',
    'DSC_EMAIL': '-1',
    'DAT_INS': '1900-01-01 00:00:00.000',
    'DAT_ATU': '1900-01-01 00:00:34.000',
}
df = spark.createDataFrame([novolinha], schema)
df_Entidades_final = df_Entidades_final.union(df)
df_Entidades_final = df_Entidades_final.drop_duplicates()

# COMMAND ----------

# MAGIC %sql
# MAGIC -- truncate table silverdev.default.dm_Entidade_Cliente_RH

# COMMAND ----------

# Carrega um df com as tabelas da camada silver 
deltaTable = DeltaTable.forName(spark, "silverdev.default.dm_cli")

(deltaTable.alias("dest")
  .merge(df_Entidades_final.alias("src"),
         "dest.COD_ENT = src.COD_ENT")
  .whenMatchedUpdate(set=
    {
      "dest.COD_ENT":"src.COD_ENT",
      "dest.COD_TIP_ENT":"src.COD_TIP_ENT",
      "dest.NME_ENT":"src.NME_ENT",
      "dest.NME_RAZ_SOC":"src.NME_RAZ_SOC",
      "dest.COD_STA_TRN":"src.COD_STA_TRN",
      "dest.NUM_CNPJ":"src.NUM_CNPJ",
      "dest.FLG_CNPJ_VAL":"src.FLG_CNPJ_VAL",
      "dest.DSC_TIPO_DOC":"src.DSC_TIPO_DOC",
      "dest.NME_CID":"src.NME_CID",
      "dest.DSC_UF":"src.DSC_UF",
      "dest.NME_BRRO":"src.NME_BRRO",
      "dest.NUM_CEP":"src.NUM_CEP",
      "dest.NUM_TEL":"src.NUM_TEL",
      "dest.NME_CONT":"src.NME_CONT",
      "dest.DSC_EMAIL":"src.DSC_EMAIL",
      "dest.DAT_INS":"src.DAT_INS",
      "dest.DAT_ATU":"src.DAT_ATU",
    }
  )
  .whenNotMatchedInsert(values=
    {
      "COD_ENT":"src.COD_ENT",
      "COD_TIP_ENT":"src.COD_TIP_ENT",
      "NME_ENT":"src.NME_ENT",
      "NME_RAZ_SOC":"src.NME_RAZ_SOC",
      "COD_STA_TRN":"src.COD_STA_TRN",
      "NUM_CNPJ":"src.NUM_CNPJ",
      "FLG_CNPJ_VAL":"src.FLG_CNPJ_VAL",
      "DSC_TIPO_DOC":"src.DSC_TIPO_DOC",
      "NME_CID":"src.NME_CID",
      "DSC_UF":"src.DSC_UF",
      "NME_BRRO":"src.NME_BRRO",
      "NUM_CEP":"src.NUM_CEP",
      "NUM_TEL":"src.NUM_TEL",
      "NME_CONT":"src.NME_CONT",
      "DSC_EMAIL":"src.DSC_EMAIL",
      "DAT_INS":"src.DAT_INS",
      "DAT_ATU":"src.DAT_ATU",
    }
  )
  .execute()
)
